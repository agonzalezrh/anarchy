---
name: publish
on:
  push:
    branches-ignore:
    - '*'
    tags:
    - 'v[0-9]*'
jobs:
  publish:
    env:
      IMAGE_NAME: anarchy
      OPERATOR_IMAGE_NAME: anarchy-operator
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Set image tags
      id: image_tags
      run: |
        # Version is a semantic version tag or semantic version with release number
        # GITHUB_REF will be of the form "refs/tags/v0.1.2" or "refs/tags/v0.1.2-1"
        # To determine RELEASE, strip off the leading "refs/tags/"
        RELEASE=${GITHUB_REF#refs/tags/v}
        # To determine VERSION, strip off any release number suffix
        VERSION=${RELEASE/-*/}

        # Only build image if version tag without release number
        # Releases indicate a change in the repository that should not trigger a new build.
        if [[ "${VERSION}" == "${RELEASE}" ]]; then
          # Publish to latest, minor, and patch tags
          # Ex: latest,v1.2,v1.2.3
          echo "IMAGE_TAGS=latest ${VERSION%.*} ${VERSION}" >> $GITHUB_OUTPUT
        fi

        # Read version from helm/Chart.yaml
        HELM_CHART_VERSION=$(sed -nr 's/^appVersion: (.*)/\1/p' helm/Chart.yaml)
        if [[ "${HELM_CHART_VERSION}" != "${VERSION}" ]]; then
          echo "Helm chart version does not match tag!"
          exit 1
        fi

    - name: Buildah Action
      id: buildah-build
      if: steps.image_tags.outputs.IMAGE_TAGS
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME }}
        tags: ${{ steps.image_tags.outputs.IMAGE_TAGS }}
        containerfiles: Dockerfile

    - name: Push image to registry
      id: push-to-registry
      if: steps.image_tags.outputs.IMAGE_TAGS
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.buildah-build.outputs.image }}
        tags: ${{ steps.buildah-build.outputs.tags }}
        registry: ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_REPOSITORY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and publish commune-operator images
      id: commune-operator
      if: steps.image_tags.outputs.IMAGE_TAGS
      run: |
        cd commune-operator;
        IMG='${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.OPERATOR_IMAGE_NAME }}:v${{ steps.image_tags.outputs.VERSION }}';
        IMG_LATEST="${IMG%:v*}:latest"
        IMG_MAJOR_VERSION="${IMG%.*.*}"
        IMG_MINOR_VERSION="${IMG%.*}"
        BUNDLE_IMG='${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.OPERATOR_IMAGE_NAME }}:bundle-v${{ steps.image_tags.outputs.VERSION }}';
        BUNDLE_IMG_LATEST="${BUNDLE_IMG%:bundle-v*}:bundle-latest"
        BUNDLE_IMG_MAJOR_VERSION="${BUNDLE_IMG%.*.*}"
        BUNDLE_IMG_MINOR_VERSION="${BUNDLE_IMG%.*}"
        CATALOG_IMG='${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.OPERATOR_IMAGE_NAME }}:catalog-v${{ steps.image_tags.outputs.VERSION }}';
        CATALOG_IMG_LATEST="${CATALOG_IMG%:catalog-v*}:catalog-latest"
        CATALOG_IMG_MAJOR_VERSION="${CATALOG_IMG%.*.*}"
        CATALOG_IMG_MINOR_VERSION="${CATALOG_IMG%.*}"
        make docker-build docker-push bundle bundle-build bundle-push catalog-build catalog-push \
          IMG="${IMG}" \
          BUNDLE_IMG="${BUNDLE_IMG}" \
          CATALOG_IMG="${CATALOG_IMG}" \
          CATALOG_BASE_IMG="${CATALOG_IMG_LATEST}" \
          CHANNELS=stable \
          DEFAULT_CHANNEL=stable \
          SHELL=/bin/bash \
          VERSION='${{ steps.image_tags.outputs.VERSION }}';
        docker tag "${IMG}" "${IMG_LATEST}"
        docker tag "${IMG}" "${IMG_MAJOR_VERSION}"
        docker tag "${IMG}" "${IMG_MINOR_VERSION}"
        docker tag "${BUNDLE_IMG}" "${BUNDLE_IMG_LATEST}"
        docker tag "${BUNDLE_IMG}" "${BUNDLE_IMG_MAJOR_VERSION}"
        docker tag "${BUNDLE_IMG}" "${BUNDLE_IMG_MINOR_VERSION}"
        docker tag "${CATALOG_IMG}" "${CATALOG_IMG_LATEST}"
        docker tag "${CATALOG_IMG}" "${CATALOG_IMG_MAJOR_VERSION}"
        docker tag "${CATALOG_IMG}" "${CATALOG_IMG_MINOR_VERSION}"
        docker push "${IMG_LATEST}"
        docker push "${IMG_MAJOR_VERSION}"
        docker push "${IMG_MINOR_VERSION}"
        docker push "${BUNDLE_IMG_LATEST}"
        docker push "${BUNDLE_IMG_MAJOR_VERSION}"
        docker push "${BUNDLE_IMG_MINOR_VERSION}"
        docker push "${CATALOG_IMG_LATEST}"
        docker push "${CATALOG_IMG_MAJOR_VERSION}"
        docker push "${CATALOG_IMG_MINOR_VERSION}"

  publish-helm-charts:
    needs: publish
    env:
      IMAGE_NAME: anarchy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Checkout gh-pages
      uses: actions/checkout@v2
      with:
        ref: gh-pages
        path: gh-pages

    - name: Configure Helm
      uses: azure/setup-helm@v1
      with:
        version: latest

    - name: Package Helm Chart
      run: |
        helm dep up helm/
        helm package helm/
        mv ${{ env.IMAGE_NAME }}-*.tgz gh-pages
        helm repo index --url https://redhat-cop.github.io/${{ env.IMAGE_NAME }} gh-pages

    - name: Push Changes to GH Pages
      run: |
        cd gh-pages
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git add .
        git commit -m "Updating Helm Chart Repository"
        git push
